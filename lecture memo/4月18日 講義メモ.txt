

キー
・候補キー

・主キー

・非キー

関数従属
・部分関数
・完全関数
・推移関数

正規化
・第一
・第二
・第三

--必要なデータの洗い出し--

アウトプット物を洗い出し

　　　　　↓

必要なデータの洗い出し


　　　　　　　　　　　　　　　　　　　　　　　　　　　　社員番号→社員を特定




データを一意に特定できるもの→候補キー

→その中から「使いやすい候補キー」を一つ選んで主キーに設定

（※一般的には連番になっているものを主キーとすることが多い）

候補キーにならないもの：非キー


社員テーブルの社員番号
社員番号事態に意味を持たせると後から変わった際にリレーションの変更が面倒になる
（ex.789→A789）→　連番を持たせることで後から変わっても大丈夫






正規化：重複の排除・データの整合性を保つ（矛盾が発生しないデータのテーブル）

関数従属：ある値から別の値も特定できるという状態

　　　　　例：これら３つのカラムは登録IDに従属している


完全関数従属：主キー　両方のキーがないと特定できない
部分関数従属：候補キーの一部に


推移関数従属：




正規化：データの矛盾をなくす
・第一正規化
　
繰り返し構造のデータを排除すること



・第二正規化

部分関数従属している部分を切り出す


・第三正規化

推移関数従属を排除


非正規系：正規化されてない状態
ー繰り返し項目がある
第一正規系：第一正規化された状態




講座番号と出席番号が主キーになっているから、新しく講座を新設した際に、
生徒の出席番号がないと登録できない



講座名と講座番号が部分関数従属になっている
→講座番号と講座名を切り分ける


推移関数従属

生徒（）と企業で分ける



部分関数従属と推移関数従属を分ける
→テーブルは増えるが、JOINすることで元の表に戻せる
→JOINしすぎると処理が重くなる
→テーブルが増えると容量も使うので、正規化しない設計もある

基本的には、データに矛盾がないようにすることが主の目的





正規化の観点から、既存のカラムで計算できるカラム（導出項目）は排除する

※値引きが発生し、結果の金額が変更された可能性もある




ER図（Entity-relation diagram）：テーブル同士の関係について記述した図



ープロジェクト
・企業社員のデータがあるまま、企業のデータを削除することはできない
・外部制約


テーブル定義書：名称やデータ型などをまとめた表






















